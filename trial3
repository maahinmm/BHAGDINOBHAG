import pygame
import time
import random
pygame.font.init()

WIDTH, HEIGHT = 1000, 800
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("BHAG DINO BHAG ")

BG = pygame.transform.scale(pygame.image.load("dino.jpeg"), (WIDTH, HEIGHT))

PLAYER_WIDTH = 40
PLAYER_HEIGHT = 60
PLAYER_VEL = 8
STAR_WIDTH = 20
STAR_HEIGHT = 20
STAR_VEL = 16
FONT = pygame.font.SysFont("BOLD", 55)

def draw(player, elapsed_time, stars, level):
    WIN.blit(BG, (0, 0))
    time_text = FONT.render(f"Time: {round(elapsed_time)}s", 1, "white")
    level_text = FONT.render(f"Level: {level}", 1, "white")
    WIN.blit(time_text, (10, 10))
    WIN.blit(level_text, (WIDTH - level_text.get_width() - 10, 10))

    pygame.draw.rect(WIN, "green", player)

    for star in stars:
        pygame.draw.rect(WIN, "orange", star)
    pygame.display.update()

def main():
    run = True
    level = 1

    player_img = pygame.image.load("dinopic.jpeg")
    player = pygame.transform.scale(player_img, (PLAYER_WIDTH, PLAYER_HEIGHT))
    player_rect = player.get_rect()
    player_rect.x = 200
    player_rect.y = HEIGHT - PLAYER_HEIGHT

    clock = pygame.time.Clock()
    start_time = time.time()
    elapsed_time = 0
    star_add_increment = 4000
    star_count = 0
    stars = []
    hit = False

    while run:
        clock.tick(60)
        star_count += clock.tick(60)
        elapsed_time = time.time() - start_time

        if star_count > star_add_increment:
            for _ in range(10):
                star_x = random.randint(0, WIDTH - STAR_WIDTH)
                star = pygame.Rect(star_x, -STAR_HEIGHT, STAR_WIDTH, STAR_HEIGHT)
                stars.append(star)
            star_add_increment = max(500, star_add_increment - 50)
            star_count = 0

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and player_rect.x - PLAYER_VEL >= 0:
            player_rect.x -= PLAYER_VEL
        if keys[pygame.K_RIGHT] and player_rect.x + PLAYER_VEL + player_rect.width <= WIDTH:
            player_rect.x += PLAYER_VEL

        for star in stars[:]:
            star.y += STAR_VEL

            if star.y > HEIGHT:
                stars.remove(star)
            elif star.y + star.height >= player_rect.y and star.colliderect(player_rect):
                stars.remove(star)
                hit = True
                break

        if hit:
            lost_text = FONT.render("SORRY, DINO IS NOW EXTINCT", 1, "red")
            quit_text = FONT.render("PRESS Q TO QUIT", 1, "dark blue")
            restart_text = FONT.render("PRESS F TO TRY AGAIN", 1, "dark blue")
            pygame.draw.rect(WIN, "white", (WIDTH/2 - 250, HEIGHT/2 - 100, 500, 200))
            WIN.blit(lost_text, (WIDTH/2 - lost_text.get_width()/2, HEIGHT/2 - lost_text.get_height()))
            WIN.blit(quit_text, (WIDTH/2 - quit_text.get_width()/2, HEIGHT/2))
            WIN.blit(restart_text, (WIDTH/2 - restart_text.get_width()/2, HEIGHT/2 + restart_text.get_height()))
            pygame.display.update()

            while True:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        return
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_q:
                            pygame.quit()
                            return
                        if event.key == pygame.K_f:
                            main()

        if elapsed_time >= level * 10:
            level += 1
            if level > 10:
                win_text = FONT.render("YOU SAVED DINO FROM EXTINCTION!", 1, "black")
                pygame.draw.rect(WIN, "white", (WIDTH/2 - 400, HEIGHT/2 - 100, 800, 200))
                WIN.blit(win_text, (WIDTH/2 - win_text.get_width()/2, HEIGHT/2 - win_text.get_height()/2))
                pygame.display.update()
                pygame.time.delay(4000)
                pygame.quit()
                return

        draw(player_rect, elapsed_time, stars, level)

if __name__ == "__main__":
    main()
